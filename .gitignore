# Biomedical Data Extraction Engine - .gitignore

# =============================================================================
# Environment and Configuration Files
# =============================================================================

# Environment variables (contains API keys and sensitive data)
.env
.env.local
.env.production
.env.staging

# Configuration files with sensitive data
config/local.yaml
config/production.yaml
config/secrets.yaml

# =============================================================================
# Python
# =============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
.idea/
*.iml
*.ipr
*.iws

# =============================================================================
# Project-Specific Files
# =============================================================================

# Database files (contain runtime data)
data/database/*.db
data/database/*.sqlite
data/database/*.sqlite3

# Vector database indices
data/vector_indices/*.index
data/vector_indices/*.faiss

# Test reports and outputs
test_report.json
test_outputs/
test_results/

# Log files
logs/*.log
*.log

# Temporary files
*.tmp
*.temp
temp/
tmp/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# =============================================================================
# Langextract Integration Files
# =============================================================================

# Langextract output files
notebooks/output/*.csv
notebooks/output/*.html
notebooks/output/*.json
notebooks/output/*.jsonl
notebooks/output/*.xlsx
notebooks/output/*.pdf

# Test outputs
test_output/
extraction_output/
demo_output/

# =============================================================================
# Machine Learning and Data Files
# =============================================================================

# Large model files
models/*.pkl
models/*.joblib
models/*.h5
models/*.hdf5
models/*.pt
models/*.pth

# Data files (large datasets)
data/raw/*.csv
data/raw/*.json
data/raw/*.xlsx
data/raw/*.parquet

# Embedding files
embeddings/
*.emb
*.vec

# =============================================================================
# Development and IDE Files
# =============================================================================

# VSCode
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# =============================================================================
# Security and Secrets
# =============================================================================

# API keys and secrets
secrets.yaml
secrets.json
*.key
*.pem
*.p12
*.pfx

# SSL certificates
*.crt
*.csr
*.pem

# =============================================================================
# Backup and Archive Files
# =============================================================================

# Backup files
*.bak
*.backup
*.old
*.orig

# Archive files
*.tar
*.tar.gz
*.tar.bz2
*.zip
*.rar
*.7z

# =============================================================================
# Documentation Build Files
# =============================================================================

# Sphinx
docs/_build/
docs/build/

# MkDocs
site/

# Jupyter Book
_build/

# =============================================================================
# Testing and Coverage
# =============================================================================

# Coverage reports
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover

# Test outputs
.pytest_cache/
.tox/
.nox/

# =============================================================================
# Dependencies
# =============================================================================

# Node.js (if using any JS tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Ruby (if using any Ruby tools)
*.gem
*.rbc
/.config
/coverage/
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/

# =============================================================================
# Docker
# =============================================================================

# Docker files
.dockerignore
Dockerfile.prod
docker-compose.override.yml

# =============================================================================
# Cloud and Deployment
# =============================================================================

# AWS
.aws/

# Google Cloud
.gcloud/

# Azure
.azure/

# =============================================================================
# Monitoring and Profiling
# =============================================================================

# Profiling data
*.prof
*.lprof

# Memory dumps
*.dump
*.dmp

# Performance data
*.perf
*.trace

# =============================================================================
# Additional Project-Specific Ignores
# =============================================================================

# Generated RAG assets and databases
data/rag/*.db
data/rag/vectors/**

# Ontology cache artifacts
data/ontologies/hpo_cache/*.db
data/ontologies/hpo_cache/*.pkl

# Metadata triage generated files
data/metadata_triage/**/*.json
data/metadata_triage/**/*.csv

# Extraction results and intermediate processing files
data/extraction_results/**
data/intermediate/**

# Uploaded files and user content
data/uploads/**

# Enhanced UI components (development artifacts)
enhanced_ui_components/**

# Extraction class definitions (runtime generated)
extraction_classes/**

# Standalone scripts and working files
*_working_server.py
*_prepopulate.py
document_processor.py

# Enhanced data files
*_enhanced.csv

# Aggregated outputs and logs
data/output/**
logs/**
